Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 


Answer:
It is O(2n) == O(n) instead of O(n^2). Although it has two loop but j will keep going!
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int j = 0;
        int i = 0;
        int sum = 0;
        int ans = Integer.MAX_VALUE;
        for(i = 0; i< nums.length; i++) {
            while(j < nums.length && sum < s){
                sum += nums[j];
                j++;
            }
            if(sum >= s) {
                ans = Math.min(ans, j - i);
            }
            sum -= nums[i];
        }
        if(ans == Integer.MAX_VALUE){
            ans = 0;
        }
        return ans;
    }

   
}
