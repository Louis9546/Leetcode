56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.
Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

/**
 * Definition for an interval.
 * class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class MyComparator implements Comparator<Interval>{
    @ Override
    public int compare(Interval a, Interval b){
        return a.start - b.start;
    }
}
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals == null || intervals.size() == 0){
            return intervals;
        }
        List<Interval> res = new LinkedList<Interval>();
        PriorityQueue<Interval> pq = new PriorityQueue<Interval>(intervals.size(), new MyComparator());
        for(Interval i : intervals){
            pq.offer(i);
        }
        
        while(pq.size() > 1){
            Interval i1 = pq.poll();
            Interval i2 = pq.poll();
            if(i1.end >= i2.start){
                pq.offer(new Interval(i1.start, Math.max(i1.end, i2.end)));
            }
            else{
                res.add(i1);
                pq.offer(i2);
            }
        }
        res.add(pq.poll());
        return res;
    }
}
