Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

Answer: Use two pointers: fast and slow ones.
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) {
            return false;
        }
        ListNode f = head;
        ListNode s = head;
        
        while(s != null && f.next != null) {
            s = s.next;
            f = f.next.next;
            if(f == null) {
                return false;
            }
            if(s == f) {
                return true;
            }
        }
        return false;
    }
}
