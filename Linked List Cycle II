Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?


Answer:
The reason why we use dummy node is that I consider the special circumstance: 1 -> 2 and 2 back to 1, namely, there is only a loop!
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null) {
            return null;
        }       
        ListNode f = head;
        ListNode s = head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        // Step 1: Make sure there is a loop
        while(true) {
            if(s == null || f.next == null){
                return null;
            }
            s = s.next;
            f = f.next.next;
            if(f == null) {
                return null;
            }
            // There is a loop
            if(f == s) {
                break;
            }
        }
        
        // Step 2: Find the length of the loop (fix slow and run fast)
        int len = 0;
        while(true){
            f = f.next;
            len++;
            if(f == s) {
                break;
            }
        }
        
        // Step 3: Reset the two pointers and run fast firstly(len).
        f = dummy;
        s = dummy;
        for(int i = 0; i < len; i++) {
            f = f.next;
        }
        while(true){
            f = f.next;
            s = s.next;
            if(f == s){
                return f;
            }
        }
    }
}
