Description
Given a string s, find the length of the longest substring T that contains at most k distinct characters.
Have you met this question in a real interview?  Yes
Example
For example, Given s = "eceba", k = 3,

T is "eceb" which its length is 4.
Challenge
O(n), n is the size of the string s.

Answer:
Time is O(n).
public class Solution {
    /*<e 2> <c 1> <b 3> <a 4>
     * @param s: A string
     * @param k: An integer
     * @return: An integer
     */
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        // write your code here
        if (s == null || s.length() == 0 || k == 0) {
            return 0;
        }
        if(s.length() < k) {
            return s.length();
        }
        
        int l = 0, len = 0;
        HashMap<Character, Integer> hm = new HashMap<Character, Integer>();
        for (int r = 0; r < s.length(); r++) {
            char c = s.charAt(r);
            hm.put(c, hm.getOrDefault(c, 0) + 1);
            if(hm.size() > k){
                len = Math.max(len, r - l);
                while(hm.size() > k){
                    char fc = s.charAt(l);
                    if(hm.get(fc) > 1) {
                        hm.put(fc, hm.get(fc) - 1);
                    }
                    else{
                        hm.remove(fc);
                    }
                    l++;
                }
            }
        } 
        len = Math.max(len, s.length()-l);
        return len;
    }
}
