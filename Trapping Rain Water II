URL: https://leetcode.com/problems/trapping-rain-water-ii/description/
Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.

Answer: Use Min Heap to solve it. 
Time Complexity: m * n log(m * n). m and n are the length and width of the map.

class Solution {
    public int trapRainWater(int[][] heightMap) {
        if (heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) {
            return 0;
        }
        int res = 0;
        int m = heightMap.length;
        int n = heightMap[0].length;
        Queue<Node> minHeap = new PriorityQueue<Node>(m * n, new MyComparator());
        boolean hash[][] = new boolean[m][n];
        
        // Offer two columns
        for(int i = 0; i < m; i++) {
            hash[i][0] = true;
            hash[i][n - 1] = true;
            minHeap.offer(new Node(i, 0, heightMap[i][0]));
            minHeap.offer(new Node(i, n - 1, heightMap[i][n - 1]));
        }
        
        // Offer two rows
        for(int i = 1 ; i < n - 1; i++) {
            hash[0][i] = true;
            hash[m - 1][i] = true;
            minHeap.offer(new Node(0, i, heightMap[0][i]));
            minHeap.offer(new Node(m - 1, i, heightMap[m - 1][i]));
        }
        
        // Four Directions
        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};
        while(!minHeap.isEmpty()){
            Node cell = minHeap.poll();
            for(int i = 0; i < 4; i++){
                int newX = cell.x + dx[i];
                int newY = cell.y + dy[i];
                if (0 < newX && newX < m && 0 < newY && newY < n && hash[newX][newY] == false) {
                    hash[newX][newY] = true;
                    res += Math.max(0, cell.hei - heightMap[newX][newY]);
                    minHeap.offer(new Node(newX, newY, Math.max(cell.hei, heightMap[newX][newY])));
                }
            }
        }
        return res;
    }
}

class MyComparator implements Comparator<Node>{
    @Override
    public int compare(Node a, Node b){
        return (a.hei - b.hei);
    }
}

class Node{
    int x, y, hei;
    public Node(int x, int y, int hei) {
        this.x = x;
        this.y = y;
        this.hei = hei;
    }
}
